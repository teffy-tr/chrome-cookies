{"version":3,"sources":["App.js","registerServiceWorker.js","index.js"],"names":["App","Component","state","response","post","responseToPost","callApi","a","fetch","json","body","status","Error","message","handleSubmit","e","preventDefault","method","headers","JSON","stringify","text","setState","componentDidMount","this","then","res","express","catch","err","console","log","render","className","onSubmit","type","value","onChange","target","style","width","height","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","error","ReactDOM","document","getElementById","URL","process","origin","addEventListener","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"mQAGA,MAAMA,UAAYC,YAAW,eAAD,iCAC1BC,MAAQ,CACNC,SAAU,GACVC,KAAM,GACNC,eAAgB,IAJQ,KAa1BC,QAb0B,sBAahB,8BAAAC,EAAA,sEACeC,MAAM,cADrB,cACFL,EADE,gBAEWA,EAASM,OAFpB,UAEFC,EAFE,OAIgB,MAApBP,EAASQ,OAJL,sBAI2BC,MAAMF,EAAKG,SAJtC,gCAMDH,GANC,2CAbgB,KAsB1BI,aAtB0B,uCAsBX,WAAMC,GAAN,iBAAAR,EAAA,6DACbQ,EAAEC,iBADW,SAEUR,MAAM,eAAgB,CAC3CS,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBR,KAAMS,KAAKC,UAAU,CAAEhB,KAAM,EAAKF,MAAME,SAP7B,cAEPD,EAFO,gBASMA,EAASkB,OATf,OASPX,EATO,OAWb,EAAKY,SAAS,CAAEjB,eAAgBK,IAXnB,2CAtBW,sDAO1Ba,oBACEC,KAAKlB,UACFmB,MAAKC,GAAOF,KAAKF,SAAS,CAAEnB,SAAUuB,EAAIC,YAC1CC,OAAMC,GAAOC,QAAQC,IAAIF,KA0B9BG,SACE,OACE,sBAAKC,UAAU,MAAf,UACE,gCAAQT,KAAKtB,MAAMC,WACnB,uBAAM+B,SAAUV,KAAKV,aAArB,UACE,6CACA,uBACEqB,KAAK,OACLC,MAAOZ,KAAKtB,MAAME,KAClBiC,SAAUtB,GAAKS,KAAKF,SAAS,CAAElB,KAAMW,EAAEuB,OAAOF,UAEhD,wBAAQD,KAAK,SAAb,uBAEF,0BAAUC,MAAOZ,KAAKtB,MAAMG,eAAgBkC,MAAO,CAAEC,MAAO,MAAOC,OAAQ,cAMpEzC,QChDf,MAAM0C,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTxB,MAAK4B,IACJA,EAAaC,cAAgB,KAC3B,MAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,KACA,cAA3BF,EAAiBrD,QACfgD,UAAUC,cAAcO,WAK1B5B,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBH,OAAM+B,IACL7B,QAAQ6B,MAAM,4CAA6CA,MChEjEC,IAAS5B,OAAO,cAAC,EAAD,IAAS6B,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBZ,UAAW,CAGzE,GADkB,IAAIa,IAAIC,GAAwBpB,OAAOC,UAC3CoB,SAAWrB,OAAOC,SAASoB,OAIvC,OAGFrB,OAAOsB,iBAAiB,QAAQ,KAC9B,MAAMjB,EAAK,UAAMe,GAAN,sBAEPtB,EAwCV,SAAiCO,GAE/BzC,MAAMyC,GACHxB,MAAKtB,IAGkB,MAApBA,EAASQ,SACuD,IAAhER,EAASe,QAAQiD,IAAI,gBAAgBC,QAAQ,cAG7ClB,UAAUC,cAAckB,MAAM5C,MAAK4B,IACjCA,EAAaiB,aAAa7C,MAAK,KAC7BmB,OAAOC,SAAS0B,eAKpBvB,EAAgBC,MAGnBrB,OAAM,KACLE,QAAQC,IACN,oEA5DAyC,CAAwBvB,GAGxBD,EAAgBC,OChCxBwB,K","file":"static/js/main.89829b47.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    response: '',\n    post: '',\n    responseToPost: '',\n  };\n\n  componentDidMount() {\n    this.callApi()\n      .then(res => this.setState({ response: res.express }))\n      .catch(err => console.log(err));\n  }\n\n  callApi = async () => {\n    const response = await fetch('/api/hello');\n    const body = await response.json();\n\n    if (response.status !== 200) throw Error(body.message);\n\n    return body;\n  };\n\n  handleSubmit = async e => {\n    e.preventDefault();\n    const response = await fetch('/api/cookies', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ post: this.state.post }),\n    });\n    const body = await response.text();\n\n    this.setState({ responseToPost: body });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <label>{this.state.response}</label>\n        <form onSubmit={this.handleSubmit}>\n          <label>Profile </label>\n          <input\n            type=\"text\"\n            value={this.state.post}\n            onChange={e => this.setState({ post: e.target.value })}\n          />\n          <button type=\"submit\">Submit</button>\n        </form>\n        <textarea value={this.state.responseToPost} style={{ width: '50%', height: '70vh' }} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}